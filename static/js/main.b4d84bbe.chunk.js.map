{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","registerServiceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","length","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","this","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","inititalStateSearch","inititalStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.b4d84bbe.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return !robots.length ? \n    <h1>Robot Not Found</h1> : \n    ( <div > {\n            robots.map((user, i) => {\n                return <Card key = {\n                    i\n                }\n                id = {\n                    robots[i].id\n                }\n                name = {\n                    robots[i].name\n                }\n                email = {\n                    robots[i].email\n                }\n                />\n            })\n        } </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\n\nimport { setSearchField,requestRobots } from '../actions'\n\nconst mapStateToProps = state => {\n  return {\n    searchField:state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange:(event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots:()=>dispatch(requestRobots())\n\n  }\n}\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const {searchField, onSearchChange, robots, isPending} = this.props;\n    const filteredRobots = robots.filter(robot =>{\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    return isPending ?\n      <h1>Loading</h1> :\n      (\n        <div className='tc'>\n          <h1 className='f1'>RoboFriends</h1>\n          <SearchBox searchChange={onSearchChange}/>\n          <Scroll>\n            <CardList robots={filteredRobots} />\n          </Scroll>\n        </div>\n      );\n  }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants';\n\n\n\nexport const setSearchField = (text) => ({\n    type : CHANGE_SEARCH_FIELD,\n    payload : text\n})\n\nexport const requestRobots = ()=>(dispatch) => {\n    dispatch({type : REQUEST_ROBOTS_PENDING});\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response=> response.json())\n      .then(data=>dispatch({type: REQUEST_ROBOTS_SUCCESS, payload:data}))\n      .catch(error=>dispatch({type:REQUEST_ROBOTS_FAILED,payload:error}))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { CHANGE_SEARCH_FIELD,REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants';\n\nconst inititalStateSearch = {\n    searchField : ''\n}\n\nconst inititalStateRobots = {\n    isPending:false,\n    robots:[],\n    error:''\n}\n\nexport const searchRobots = (state=inititalStateSearch , action={}) => {\n    switch(action.type){\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({},state,{searchField: action.payload});\n        default:\n            return state;\n    }\n}\n\nexport const requestRobots = (state=inititalStateRobots , action={}) =>{\n    switch(action.type){\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({},state,{isPending: true})\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({},state,{robots: action.payload, isPending:false})\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({},state,{error: action.payload, isPending:false})\n        default:\n            return state\n}\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider} from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport './index.css';\nimport thunkMiddleware from 'redux-thunk';\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots,requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(<Provider store={store}>\n    <App/>\n    </Provider>, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}